<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://jaystar13.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://jaystar13.github.io/" rel="alternate" type="text/html" hreflang="ko"/><updated>2025-10-08T12:22:58+00:00</updated><id>https://jaystar13.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Dynamic Form Submit</title><link href="https://jaystar13.github.io/blog/2024/dynamic-form-submit/" rel="alternate" type="text/html" title="Dynamic Form Submit"/><published>2024-01-23T07:20:00+00:00</published><updated>2024-01-23T07:20:00+00:00</updated><id>https://jaystar13.github.io/blog/2024/dynamic-form-submit</id><content type="html" xml:base="https://jaystar13.github.io/blog/2024/dynamic-form-submit/"><![CDATA[<h2 id="1-opening">1. Opening</h2> <p>스프링 부트와 타임리프를 이용한 동적인 폼 요소 제출 방식을 알아보도록 합니다.<br/> 이 글을 읽기 전에 아래 글을 참고해주세요.</p> <ul> <li><a href="https://jaystar13.github.io/blog/2024/dynamic-form/">Dynamic Form Search with Spring Boot + Thymeleaf</a></li> <li><a href="https://jaystar13.github.io/blog/2024/dynamic-form-refactoring/">Dynamic Form Search - Refactoring</a></li> </ul> <h3 id="조건-및-요구사항">조건 및 요구사항</h3> <ul> <li>페이지에 다양한 레이아웃의 폼이 다수 구성되어 있습니다.</li> <li>폼 제출(<code class="language-plaintext highlighter-rouge">submit</code>)시 페이지의 모든 폼은 같은 트랙잭션으로 처리됩니다.</li> </ul> <h3 id="해결계획">해결계획</h3> <ul> <li>입력한 폼 값을 전달받을 수 있도록 submit 전용 DTO를 만들고 Controller는 해당 DTO에 값을 매핑합니다.</li> <li>html의 name속성을 이용하여 각각 폼 요소의 값을 DTO에 매핑하도록 합니다.</li> <li>기존 <code class="language-plaintext highlighter-rouge">MyFormService</code>를 활용하여 저장 메서드를 추가합니다.</li> </ul> <h3 id="spec">Spec</h3> <p>java17, spring boot 3.x, spring-mvc, thymeleaf</p> <h2 id="2-implementation">2. Implementation</h2> <p>본격적인 구현전에 기존 소스를 조금 리팩터링 하도록 하겠습니다.<br/> 조회와 제출을 같이 하려다 보니 섹션에 대한 정의(또는 설정)가 필요하게 되어 Enum 객체를 만들 필요게 되었습니다.</p> <h3 id="2-1-sectionitem-생성">2-1. SectionItem 생성</h3> <p>해당 Enum은 각 섹션에 대한 key-name 과 bean-name을 관리하도록 합니다.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="kd">public</span> <span class="kd">enum</span> <span class="nc">SectionItem</span> <span class="o">{</span>
    <span class="no">PROFILE</span><span class="o">(</span><span class="s">"profile"</span><span class="o">,</span> <span class="s">"myProfileFormService"</span><span class="o">),</span>
    <span class="no">ORDER</span><span class="o">(</span><span class="s">"order"</span><span class="o">,</span> <span class="s">"myOrderFormService"</span><span class="o">);</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">key</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">beanName</span><span class="o">;</span>

    <span class="nc">SectionItem</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">beanName</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">beanName</span> <span class="o">=</span> <span class="n">beanName</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>해당 클래스는 어플리케이션 전반적으로 사용되기 때문에 사용법은 구현 코드를 참조해주세요.</p> <h4 id="2-2-submit-전용-dto-생성">2-2. submit 전용 DTO 생성</h4> <p>폼 제출시 입력 값 매핑을 담당할 DTO 객체를 생성합니다.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MySectionsSubmit</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MyProfileForm</span><span class="o">&gt;</span> <span class="n">profiles</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MyOrderForm</span><span class="o">&gt;</span> <span class="n">orders</span><span class="o">;</span>

<span class="o">}</span>
</code></pre></div></div> <p>저희는 현재 profile과 order 두가지의 폼 양식이 있기 때문에 이 두가지만 정의하였습니다.<br/> 만일 폼 양식이 더 늘어나게 된다면 여기 DTO에 추가를 해야하는 구조입니다.</p> <hr/> <p>spring-mvc는 클라이언트에서 입력한 input 값을 전달받기 위해 다양한 방식의 기능을 제공하고 있습니다.<br/> html의 name속성에서 정의한 값을 기준으로 우리가 만든 객체에 매핑을 자동으로 도와주는 기능도 있습니다.<br/> java bean property를 사용하기 때문에 name속성 값과 DTO에서 정의한 필드 이름을 맞춰주어야 합니다.<br/> (사실 정확히 말하자면 필드 이름이 아닌 getter/setter 메서드 이름이지만 통상적으로 필드이름과 getter/setter이름을 맞추기 때문에 필드 이름이라고 말씀드렸습니다.)</p> <h4 id="2-3-html-name속성-정의">2-3. html name속성 정의</h4> <p>기존 단순 문자출력 항목을 input 타입으로 변경하고 name속성을 정의하도록 합니다.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(...)
<span class="nt">&lt;table</span> <span class="na">th:fragment=</span><span class="s">"section(profile)"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;tr</span> <span class="na">th:each=</span><span class="s">"form, formStat : ${profile}"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;td&gt;</span>
            <span class="nt">&lt;table&gt;</span>
                <span class="nt">&lt;tr&gt;</span>
                    <span class="nt">&lt;td&gt;</span>
                        <span class="nt">&lt;span&gt;</span>Name:<span class="nt">&lt;/span&gt;</span>
                        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">th:value=</span><span class="s">"${form.name}"</span> <span class="na">th:name=</span><span class="s">"|profiles[${formStat.index}].name|"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;/td&gt;</span>
                <span class="nt">&lt;/tr&gt;</span>
                <span class="nt">&lt;tr&gt;</span>
                    <span class="nt">&lt;td&gt;</span>
                        <span class="nt">&lt;span&gt;</span>Phone Number:<span class="nt">&lt;/span&gt;</span>
                        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">th:value=</span><span class="s">"${form.phoneNumber}"</span>
                               <span class="na">th:name=</span><span class="s">"|profiles[${formStat.index}].phoneNumber|"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;/td&gt;</span>
                <span class="nt">&lt;/tr&gt;</span>
            <span class="nt">&lt;/table&gt;</span>
        <span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
<span class="nt">&lt;/table&gt;</span>
(...)
</code></pre></div></div> <p>타임리프의 <code class="language-plaintext highlighter-rouge">th:name</code>을 이용하여 값을 정의하였습니다.</p> <p><code class="language-plaintext highlighter-rouge">order.html</code>도 위와 동일하게 변경하도록 합니다.</p> <p>그리고 우리는 폼을 제출해야 하기 때문에 <code class="language-plaintext highlighter-rouge">dynamicForm.html</code> 파일도 수정을 해야합니다.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(...)
<span class="nt">&lt;form</span> <span class="na">name=</span><span class="s">"dynamicForm"</span> <span class="na">action=</span><span class="s">"/forms"</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;table&gt;</span>
        <span class="nt">&lt;tr</span> <span class="na">th:each=</span><span class="s">"section, sectionStat : ${sections.sections}"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;td&gt;</span>
                <span class="nt">&lt;span</span> <span class="na">th:text=</span><span class="s">"|Section-${section.sectionItem.key}"</span><span class="nt">&gt;&lt;/span&gt;</span>
                <span class="nt">&lt;table</span> <span class="na">th:replace=</span><span class="s">"~{|fragment/${section.sectionItem.key}| :: section(${section.myForms.myForms})}"</span><span class="nt">&gt;&lt;/table&gt;</span>
            <span class="nt">&lt;/td&gt;</span>
        <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;/table&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span>
(...)
</code></pre></div></div> <h4 id="2-4-controller-수정">2-4. Controller 수정</h4> <p>이제 폼 제출을 Controller에서 받을 수 있도록 해봅시다.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="o">(...)</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/forms"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">submitDynamicForms</span><span class="o">(</span><span class="nd">@ModelAttribute</span><span class="o">(</span><span class="s">"sections"</span><span class="o">)</span> <span class="nc">MySectionsSubmit</span> <span class="n">submit</span><span class="o">)</span> <span class="o">{</span>

        <span class="n">service</span><span class="o">.</span><span class="na">saveForms</span><span class="o">(</span><span class="n">getSectionItems</span><span class="o">(),</span> <span class="n">submit</span><span class="o">);</span>

        <span class="k">return</span> <span class="s">"redirect:/forms"</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">SectionItem</span><span class="o">&gt;</span> <span class="nf">getSectionItems</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="nc">SectionItem</span><span class="o">.</span><span class="na">PROFILE</span><span class="o">,</span> <span class="nc">SectionItem</span><span class="o">.</span><span class="na">ORDER</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div> <p>POST방식의 요청이 왔을 때 처리하도록 메서드를 추가하였습니다.<br/> 위에서 말씀드렸던데로 spring-mvc의 <code class="language-plaintext highlighter-rouge">@ModelAttribute</code>를 사용하여 <code class="language-plaintext highlighter-rouge">MySectionsSubmit</code> DTO와 매핑하도록 하였습니다.<br/> <code class="language-plaintext highlighter-rouge">@ModelAttribute</code>의 name속성을 <code class="language-plaintext highlighter-rouge">sections</code>로 정의한 것은 양식 제출전 해당 페이지의 값 전달에 <code class="language-plaintext highlighter-rouge">sections</code> 이름이 사용되었기 때문입니다.</p> <p>그리고 <code class="language-plaintext highlighter-rouge">Service</code>에도 저장을 할 수 있도록 메서드를 추가 해야겠지요?</p> <h3 id="2-5-service-수정">2-5. Service 수정</h3> <p><strong>DynamicFormSearchService</strong></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="o">(...)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">saveForms</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">SectionItem</span><span class="o">&gt;</span> <span class="n">sectionItems</span><span class="o">,</span> <span class="nc">MySectionsSubmit</span> <span class="n">mySections</span><span class="o">)</span> <span class="o">{</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">SectionItem</span> <span class="n">sectionItem</span> <span class="o">:</span> <span class="n">sectionItems</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">MyFormService</span> <span class="n">myFormService</span> <span class="o">=</span> <span class="n">myFormFactory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">sectionItem</span><span class="o">.</span><span class="na">getBeanName</span><span class="o">());</span>
            <span class="n">myFormService</span><span class="o">.</span><span class="na">saveMySection</span><span class="o">(</span><span class="n">mySections</span><span class="o">);</span>
        <span class="o">}</span>

    <span class="o">}</span>

</code></pre></div></div> <p>우리 예제에서는 data관련 라이브러리 의존을 사용하고 있지 않아 위 메서드는 Transaction이 명시되어 있지 않지만<br/> <code class="language-plaintext highlighter-rouge">@Transaction</code>을 사용하면 전파기능 동작으로 단일 트랙잭션으로 묶을 수 있을 것 같습니다.</p> <p><strong>MyFormService</strong></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MyFormService</span> <span class="o">{</span>
    <span class="nc">MySection</span> <span class="nf">getMySection</span><span class="o">();</span>

    <span class="nc">Integer</span> <span class="nf">saveMySection</span><span class="o">(</span><span class="nc">MySectionsSubmit</span> <span class="n">mySection</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div> <p><strong>MyProfileFormService</strong></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
    <span class="o">(...)</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">saveMySection</span><span class="o">(</span><span class="nc">MySectionsSubmit</span> <span class="n">mySection</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MyProfileForm</span><span class="o">&gt;</span> <span class="n">profiles</span> <span class="o">=</span> <span class="n">mySection</span><span class="o">.</span><span class="na">getProfiles</span><span class="o">();</span>
        <span class="c1">//저장로직 구현</span>

        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div> <p>이렇게 수정을 해서 동적인 폼에 대한 제출 방법 구현도 마무리 하도록 하겠습니다.</p> <h2 id="3-closing">3. Closing</h2> <p>동적인 폼 양식 처리를 위한 조회 및 제출 방법에 대해<br/> 몇개의 글을 통하여 알아보았습니다.</p> <p>사실 동적인 폼 양식이라면 Frontend가 이것보다는 훨씬 더 복잡할 것입니다.<br/> 하지만 어떤 복잡한 화면이라도 클라이언트의 입력 값을 표준 방식으로 Backend에 전달하도록 규약을 정의하고<br/> Backend에서는 이 전달 받은 값을 효율적으로 처리할 수 있는 구조로 설계를 한다면<br/> <strong>성능에 이점을 가져올 수 있고 운영과 유지보수 또한 비교적 손쉽게 가능할 것</strong>으로 생각됩니다.</p> <p>제가 해당글을 통해서 전달하고자 했던 내용이 사실 이 부분이기도 합니다.</p> <p>다른 좋은 아이디어가 있다면 논의해 보는것도 즐거울 것 같습니다.</p> <p>위 소스는 <a href="https://github.com/jaystar13/blog-code/tree/master/_2024-01-21-dynamic-form-submit">깃헙</a>에서 확인할 수 있습니다.</p>]]></content><author><name></name></author><category term="develop"/><category term="java"/><category term="spring-boot"/><category term="thymeleaf"/><summary type="html"><![CDATA[스프링 부트와 타임리프를 이용한 동적인 폼 요소 제출]]></summary></entry><entry><title type="html">Dynamic Form Search - Refactoring</title><link href="https://jaystar13.github.io/blog/2024/dynamic-form-refactoring/" rel="alternate" type="text/html" title="Dynamic Form Search - Refactoring"/><published>2024-01-19T15:30:16+00:00</published><updated>2024-01-19T15:30:16+00:00</updated><id>https://jaystar13.github.io/blog/2024/dynamic-form-refactoring</id><content type="html" xml:base="https://jaystar13.github.io/blog/2024/dynamic-form-refactoring/"><![CDATA[<h2 id="issue">Issue</h2> <p><a href="https://jaystar13.github.io/blog/2024/dynamic-form/">이전글</a>에서 구현했던 코드를 리팩터링 해보도록 하겠습니다.</p> <h2 id="condition">Condition</h2> <p>구현을 위한 특별한 조건은 없습니다.</p> <p>다만, <a href="https://jojoldu.tistory.com/412">일급 컬렉션</a>을 사용하기 때문에 이에 대한 지식이 필요할 수 있습니다.</p> <h2 id="plan">Plan</h2> <ul> <li>컨트롤러의 forms타입(<code class="language-plaintext highlighter-rouge">List&lt;List&lt;MyForm&gt;&gt;</code>)을 일급 컬렉션으로 변경하도록 합니다.</li> <li>html의 타입별 if문 분기를 파일로 따로 뺄 수 있도록 수정합니다.</li> </ul> <h2 id="spec">Spec</h2> <p>java17, spring boot 3.x, spring-mvc, thymeleaf</p> <h2 id="implementation">Implementation</h2> <p>컨트롤러의 <code class="language-plaintext highlighter-rouge">List&lt;List&lt;MyForm&gt;&gt; forms = service.getForms(formNames)</code> 이 부분을 보면<br/> 리스트 안에 다시 리스트가 들어있는 조금은 복잡한 구조를 가집니다.</p> <p>먼저 <code class="language-plaintext highlighter-rouge">List&lt;MyForm&gt;</code>을 DTO클래스로 변경하는 작업을 하겠습니다.</p> <h3 id="1-mysection-구현">1. MySection 구현</h3> <p>처음엔 일급 컬렉션 객체로 만들려 했지만 후술하게될 html분기문 리팩터링을 위해서<br/> Section의 고유 이름이 필요하여 멤버 변수가 두개인 DTO객체로 구현하게 되었습니다.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MySection</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">sectionName</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MyForm</span><span class="o">&gt;</span> <span class="n">mySection</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">MySection</span><span class="o">(</span><span class="nc">String</span> <span class="n">sectionName</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MyForm</span><span class="o">&gt;</span> <span class="n">mySection</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">sectionName</span> <span class="o">=</span> <span class="n">sectionName</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">mySection</span> <span class="o">=</span> <span class="n">mySection</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">sectionName</code>은 해당 섹션에 고유 이름을 부여하였고<br/> <code class="language-plaintext highlighter-rouge">mySection</code>으로 섹션을 구성하는 form을 참고하도록 하였습니다.</p> <p>그리고 기존에 <code class="language-plaintext highlighter-rouge">List&lt;MyForm&gt;</code>을 사용하는 곳을 이 <code class="language-plaintext highlighter-rouge">MySection</code>로 변경을 합니다.</p> <h4 id="1-1-myformservice-인터페이스-및-구현체">1-1. MyFormService 인터페이스 및 구현체</h4> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MyFormService</span> <span class="o">{</span>
    <span class="nc">MySection</span> <span class="nf">getMySection</span><span class="o">();</span>
<span class="o">}</span>  
</code></pre></div></div> <p>메서드 이름도 하는일이 좀 더 명확하도록 변경하였습니다.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyOrderFormService</span> <span class="kd">implements</span> <span class="nc">MyFormService</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">MySection</span> <span class="nf">getMySection</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MySection</span><span class="o">(</span><span class="s">"order"</span><span class="o">,</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="k">new</span> <span class="nc">MyOrderForm</span><span class="o">(</span><span class="s">"clean code"</span><span class="o">,</span> <span class="mi">2</span><span class="o">),</span>
                <span class="k">new</span> <span class="nf">MyOrderForm</span><span class="o">(</span><span class="s">"candy"</span><span class="o">,</span> <span class="mi">10</span><span class="o">)));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>주문 서비스에서는 <code class="language-plaintext highlighter-rouge">order</code>라는 이름으로 <code class="language-plaintext highlighter-rouge">MySection</code>을 리턴하였습니다.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyProfileFormService</span> <span class="kd">implements</span> <span class="nc">MyFormService</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">MySection</span> <span class="nf">getMySection</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MySection</span><span class="o">(</span><span class="s">"profile"</span><span class="o">,</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="nc">MyProfileForm</span><span class="o">(</span><span class="s">"홍길동"</span><span class="o">,</span> <span class="s">"012-3456-7890"</span><span class="o">)));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>프로필 서비스에서는 <code class="language-plaintext highlighter-rouge">profile</code>라는 이름으로 <code class="language-plaintext highlighter-rouge">MySection</code>을 리턴하였습니다.</p> <h4 id="1-2-mysections-dto-생성">1-2. MySections DTO 생성</h4> <p>서비스에서 조회한 <code class="language-plaintext highlighter-rouge">Section</code>을 리스트 형태로 가지고 있는 <code class="language-plaintext highlighter-rouge">MySections</code>를 생성하겠습니다.<br/> 이 <code class="language-plaintext highlighter-rouge">MySections</code>는 화면으로 전달되어 값을 표현하는데 사용할 수 있습니다.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MySections</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MySection</span><span class="o">&gt;</span> <span class="n">sections</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">MySections</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">sections</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="nc">MySection</span> <span class="n">mySection</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">sections</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">mySection</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">MySections</code>는 일급 컬렉션객체 입니다.</p> <p>인터페이스의 메서드 명과 리턴타입을 변경하였으니<br/> 여기저기 컴파일 에러가 발생합니다.</p> <p>이제 관련된 부분을 수정해 보겠습니다.</p> <h4 id="dynamicformsearchservice">DynamicFormSearchService</h4> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DynamicFormSearchService</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MyFormFactory</span> <span class="n">myFormFactory</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">MySections</span> <span class="nf">getForms</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">serviceNames</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">MySections</span> <span class="n">sections</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MySections</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">serviceName</span> <span class="o">:</span> <span class="n">serviceNames</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">MyFormService</span> <span class="n">myFormService</span> <span class="o">=</span> <span class="n">myFormFactory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">serviceName</span><span class="o">);</span>
            <span class="nc">MySection</span> <span class="n">mySection</span> <span class="o">=</span> <span class="n">myFormService</span><span class="o">.</span><span class="na">getMySection</span><span class="o">();</span>
            <span class="n">sections</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">mySection</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">sections</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h4 id="dynamicformsearchcontroller">DynamicFormSearchController</h4> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DynamicFormSearchController</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">DynamicFormSearchService</span> <span class="n">service</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/forms"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getDynamicForms</span><span class="o">(</span><span class="nc">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">formNames</span> <span class="o">=</span> <span class="o">{</span><span class="s">"myProfileFormService"</span><span class="o">,</span> <span class="s">"myOrderFormService"</span><span class="o">};</span>

        <span class="nc">MySections</span> <span class="n">sections</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getForms</span><span class="o">(</span><span class="n">formNames</span><span class="o">);</span>

        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"sections"</span><span class="o">,</span> <span class="n">sections</span><span class="o">);</span>

        <span class="k">return</span> <span class="s">"dynamicForm"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>모델에 전달하는 key 명칭을 <code class="language-plaintext highlighter-rouge">sections</code>로 변경하였습니다.</p> <h4 id="dynamicform">dynamicForm</h4> <p>구조가 변경되었기 때문에 html도 수정을 해줘야 합니다.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(...)
<span class="nt">&lt;table&gt;</span>
    <span class="nt">&lt;tr</span> <span class="na">th:each=</span><span class="s">"forms, formsStat : ${sections.sections}"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;td&gt;</span>
            <span class="nt">&lt;span</span> <span class="na">th:text=</span><span class="s">"|Form-${formsStat.index}"</span><span class="nt">&gt;&lt;/span&gt;</span>
            <span class="nt">&lt;table&gt;</span>
                <span class="nt">&lt;tr</span> <span class="na">th:each=</span><span class="s">"form, formStat : ${forms.mySection}"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;td</span> <span class="na">th:if=</span><span class="s">"${form instanceof T(com.jaystar.dto.MyProfileForm)}"</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;table&gt;</span>
                            <span class="nt">&lt;tr&gt;</span>
                                <span class="nt">&lt;td&gt;</span>
                                    <span class="nt">&lt;span&gt;</span>Name:<span class="nt">&lt;/span&gt;</span>
                                    <span class="nt">&lt;span</span> <span class="na">th:text=</span><span class="s">"${form.name}"</span><span class="nt">&gt;&lt;/span&gt;</span>
                                <span class="nt">&lt;/td&gt;</span>
                            <span class="nt">&lt;/tr&gt;</span>
                            <span class="nt">&lt;tr&gt;</span>
                                <span class="nt">&lt;td&gt;</span>
                                    <span class="nt">&lt;span&gt;</span>Phone Number:<span class="nt">&lt;/span&gt;</span>
                                    <span class="nt">&lt;span</span> <span class="na">th:text=</span><span class="s">"${form.phoneNumber}"</span><span class="nt">&gt;&lt;/span&gt;</span>
                                <span class="nt">&lt;/td&gt;</span>
                            <span class="nt">&lt;/tr&gt;</span>
                        <span class="nt">&lt;/table&gt;</span>
                    <span class="nt">&lt;/td&gt;</span>

                    <span class="nt">&lt;td</span> <span class="na">th:if=</span><span class="s">"${form instanceof T(com.jaystar.dto.MyOrderForm)}"</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;table&gt;</span>
                            <span class="nt">&lt;tr&gt;</span>
                                <span class="nt">&lt;td&gt;</span>
                                    <span class="nt">&lt;span&gt;</span>Product Name:<span class="nt">&lt;/span&gt;</span>
                                    <span class="nt">&lt;span</span> <span class="na">th:text=</span><span class="s">"${form.productName}"</span><span class="nt">&gt;&lt;/span&gt;</span>
                                <span class="nt">&lt;/td&gt;</span>
                            <span class="nt">&lt;/tr&gt;</span>
                            <span class="nt">&lt;tr&gt;</span>
                                <span class="nt">&lt;td&gt;</span>
                                    <span class="nt">&lt;span&gt;</span>Quantity:<span class="nt">&lt;/span&gt;</span>
                                    <span class="nt">&lt;span</span> <span class="na">th:text=</span><span class="s">"${form.quantity}"</span><span class="nt">&gt;&lt;/span&gt;</span>
                                <span class="nt">&lt;/td&gt;</span>
                            <span class="nt">&lt;/tr&gt;</span>
                        <span class="nt">&lt;/table&gt;</span>
                    <span class="nt">&lt;/td&gt;</span>
                <span class="nt">&lt;/tr&gt;</span>
            <span class="nt">&lt;/table&gt;</span>
        <span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
<span class="nt">&lt;/table&gt;</span>
(...)
</code></pre></div></div> <p>코드가 너무 기네요😭</p> <p>얼릉 리팩터링을 해봐야겠습니다.</p> <h3 id="html분기문-리팩터링">html분기문 리팩터링</h3> <p>dynamicForm.html 코드를 보면 <code class="language-plaintext highlighter-rouge">&lt;td th:if="${form instanceof T(com.jaystar.dto.MyProfileForm)}"&gt;</code>와 같이 타입을 검사하여 분기처리를 하고 있습니다.<br/> 이 부분은 thymeleaf가 제공하는 fragment를 이용하여 각각의 파일로 만들어 처리를 할 수 있을거 같습니다.</p> <p>thymeleaf의 fragment는 웹 페이지에서 공통으로 사용하는 파일의 재사용을 위한 기능을 제공합니다.<br/> 이를 이용하여 우리는 각각 Section별로 별도의 html을 만들고 이를 호출하여 사용하도록 변경을 하면 좋을 것 같습니다.</p> <p>이것을 위해서 우리는 위에 <code class="language-plaintext highlighter-rouge">MySection</code>를 만들어 놓았습니다.</p> <h4 id="fragmentprofilehtml-생성">fragment/profile.html 생성</h4> <p>프로필을 표현하기 위한 profile파일을 생성하였습니다.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">xmlns:th=</span><span class="s">"http://www.thymeleaf.org"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Title<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;table</span> <span class="na">th:fragment=</span><span class="s">"section(profile)"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;tr</span> <span class="na">th:each=</span><span class="s">"form, formStat : ${profile}"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;td&gt;</span>
            <span class="nt">&lt;table&gt;</span>
                <span class="nt">&lt;tr&gt;</span>
                    <span class="nt">&lt;td&gt;</span>
                        <span class="nt">&lt;span&gt;</span>Name:<span class="nt">&lt;/span&gt;</span>
                        <span class="nt">&lt;span</span> <span class="na">th:text=</span><span class="s">"${form.name}"</span><span class="nt">&gt;&lt;/span&gt;</span>
                    <span class="nt">&lt;/td&gt;</span>
                <span class="nt">&lt;/tr&gt;</span>
                <span class="nt">&lt;tr&gt;</span>
                    <span class="nt">&lt;td&gt;</span>
                        <span class="nt">&lt;span&gt;</span>Phone Number:<span class="nt">&lt;/span&gt;</span>
                        <span class="nt">&lt;span</span> <span class="na">th:text=</span><span class="s">"${form.phoneNumber}"</span><span class="nt">&gt;&lt;/span&gt;</span>
                    <span class="nt">&lt;/td&gt;</span>
                <span class="nt">&lt;/tr&gt;</span>
            <span class="nt">&lt;/table&gt;</span>
        <span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
<span class="nt">&lt;/table&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div> <h4 id="fragmentorderhtml-생성">fragment/order.html 생성</h4> <p>주문내역을 표현하기 위한 order파일도 생성하였습니다.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">xmlns:th=</span><span class="s">"http://www.thymeleaf.org"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Title<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;table</span> <span class="na">th:fragment=</span><span class="s">"section(order)"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;tr</span> <span class="na">th:each=</span><span class="s">"form, formStat : ${order}"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;td&gt;</span>
            <span class="nt">&lt;table&gt;</span>
                <span class="nt">&lt;tr&gt;</span>
                    <span class="nt">&lt;td&gt;</span>
                        <span class="nt">&lt;span&gt;</span>Product Name:<span class="nt">&lt;/span&gt;</span>
                        <span class="nt">&lt;span</span> <span class="na">th:text=</span><span class="s">"${form.productName}"</span><span class="nt">&gt;&lt;/span&gt;</span>
                    <span class="nt">&lt;/td&gt;</span>
                <span class="nt">&lt;/tr&gt;</span>
                <span class="nt">&lt;tr&gt;</span>
                    <span class="nt">&lt;td&gt;</span>
                        <span class="nt">&lt;span&gt;</span>Quantity:<span class="nt">&lt;/span&gt;</span>
                        <span class="nt">&lt;span</span> <span class="na">th:text=</span><span class="s">"${form.quantity}"</span><span class="nt">&gt;&lt;/span&gt;</span>
                    <span class="nt">&lt;/td&gt;</span>
                <span class="nt">&lt;/tr&gt;</span>
            <span class="nt">&lt;/table&gt;</span>
        <span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
<span class="nt">&lt;/table&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div> <h4 id="dynamicformhtml-수정">dynamicForm.html 수정</h4> <p>그리고 각각 섹션파일을 불러오기 위해 <code class="language-plaintext highlighter-rouge">dynamicForm</code> 파일을 아래와 같이 수정하였습니다.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(...)
<span class="nt">&lt;table&gt;</span>
    <span class="nt">&lt;tr</span> <span class="na">th:each=</span><span class="s">"forms, formsStat : ${sections.sections}"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;td&gt;</span>
            <span class="nt">&lt;span</span> <span class="na">th:text=</span><span class="s">"|Section-${forms.sectionName}"</span><span class="nt">&gt;&lt;/span&gt;</span>
            <span class="nt">&lt;table</span> <span class="na">th:replace=</span><span class="s">"~{|fragment/${forms.sectionName}| :: section(${forms.mySection})}"</span><span class="nt">&gt;&lt;/table&gt;</span>
        <span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
<span class="nt">&lt;/table&gt;</span>
(...)
</code></pre></div></div> <p>처음에 비해 훨씬 깔끔해진 코드입니다.</p> <h2 id="conclusion">Conclusion</h2> <p>이제 우리는 테스트로 넣어 놓은 프로필, 주문 두개의 양식 이외에 다른 양식이 필요한 경우에도<br/> 인터페이스를 구현한 서비스와 DTO, html정도만 추가하면<br/> 기존 코드의 수정 없이 쉽게 처리할 수 있는 구조를 만들었습니다.</p> <p>다음엔 해당 양식을 제출하여 저장소까지 처리될 수 있는 구조를 알아보도록 하겠습니다.</p> <p>위 소스는 <a href="https://github.com/jaystar13/blog-code/tree/master/_2024-01-19-dynamic-form-refactor">깃헙</a>에서 확인할 수 있습니다.</p>]]></content><author><name></name></author><category term="develop"/><category term="java"/><category term="spring-boot"/><category term="thymeleaf"/><category term="refactoring"/><summary type="html"><![CDATA[스프링 부트와 타임리프를 이용한 동적인 폼 요소 조회 - 리팩토링]]></summary></entry><entry><title type="html">Dynamic Form Search with Spring Boot + Thymeleaf</title><link href="https://jaystar13.github.io/blog/2024/dynamic-form/" rel="alternate" type="text/html" title="Dynamic Form Search with Spring Boot + Thymeleaf"/><published>2024-01-09T16:40:16+00:00</published><updated>2024-01-09T16:40:16+00:00</updated><id>https://jaystar13.github.io/blog/2024/dynamic-form</id><content type="html" xml:base="https://jaystar13.github.io/blog/2024/dynamic-form/"><![CDATA[<h2 id="issue">Issue</h2> <p>Frontend를 개발하다 보면 form형식을 굉장히 자주 마주칩니다. 한 두개의 입력 항목만 기입하는 단순한 폼 형식부터 경력사항 입력과 같이 여러 폼 형식을 입력하고 제출하는 리스트 형식의 폼까지 다양한 UI의 폼을 볼 수 있습니다.<br/> React/VueJS와 같은 CSR 방식이 아닌 thymeleaf를 이용한 SSR 방식으로 다양한 폼에 대한 효율적인 구현을 고민해보고자 합니다.</p> <p><img src="/assets/img/2024-01-09-Figure-1.jpg" alt="예상화면"/></p> <h2 id="condition">Condition</h2> <p>구현해야할 페이지는 다음과 같습니다.</p> <ul> <li>페이지는 하나 또는 둘 이상의 그룹으로 나뉘어져 있습니다.(이 그룹을 섹션이라고 하겠습니다.)</li> <li>섹션은 하나 또는 둘 이상의 폼으로 구성되어 있습니다.</li> <li>섹션은 여러개가 존재할 수 있으며 페이지를 구성하는 섹션은 설정으로 관리하고 있습니다.</li> </ul> <h2 id="plan">Plan</h2> <ul> <li> <p>반복되는 섹션과 폼을 위해서 상속과 인터페이스를 사용해야 할 것 같습니다.</p> </li> <li> <p>Factory Pattern을 사용해서 원하는 서비스를 호출하도록 합니다.</p> </li> </ul> <h2 id="spec">Spec</h2> <p>java17, spring boot 3.x, spring-mvc, thymeleaf</p> <h2 id="implementation">Implementation</h2> <ul> <li> <p>조회<br/> 구현 전 Plan 단계에서 구상한 대로 인터페이스를 만들도록 하겠습니다.<br/> <code class="language-plaintext highlighter-rouge">FormService</code>라고 이름지었고 코드는 아래처럼 단순합니다.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MyFormService</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MyForm</span><span class="o">&gt;</span> <span class="nf">getMyForms</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div> </div> <p>이 인터페이스를 구현한 객체는 <code class="language-plaintext highlighter-rouge">getMyForms</code>를 사용해서 자신의 Form 데이터인 <code class="language-plaintext highlighter-rouge">List&lt;MyForm&gt;</code> 타입을 리턴할 것입니다.<br/> Form은 하나 이상 존재할 수 있기 때문에 List타입을 사용합니다.<br/> <code class="language-plaintext highlighter-rouge">MyForm</code>은 모든 Form의 부모객체로 사용합니다.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyForm</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div> </div> <p>이제 <code class="language-plaintext highlighter-rouge">MyFormService</code>인터페이스 구현체를 준비해 봅시다.<br/> <code class="language-plaintext highlighter-rouge">MyProfileFormService</code> 라는 구현체는 값 전달을 위해 <code class="language-plaintext highlighter-rouge">MyProfileForm</code> 객체를 사용하는데요, 이것은 <code class="language-plaintext highlighter-rouge">MyForm</code>을 상속하고 있습니다.</p> <p>코드는 아래와 같이 되겠네요.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyProfileFormService</span> <span class="kd">implements</span> <span class="nc">MyFormService</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MyForm</span><span class="o">&gt;</span> <span class="nf">getMyForms</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="nc">MyProfileForm</span><span class="o">(</span><span class="s">"홍길동"</span><span class="o">,</span> <span class="s">"012-3456-7890"</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span> 
</code></pre></div> </div> <p>구현체를 하나더 만들어 볼까요? <code class="language-plaintext highlighter-rouge">MyOrderFormService</code>는 나의 주문내역을 관리하는 서비스입니다.<br/> 여기서 구현한 <code class="language-plaintext highlighter-rouge">getMyForms</code> 에는 하나 이상의 주문 내역을 가지고 옵니다.</p> <p>마찬가지로 코드는 아래와 같습니다.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyOrderFormService</span> <span class="kd">implements</span> <span class="nc">MyFormService</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MyForm</span><span class="o">&gt;</span> <span class="nf">getMyForms</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="k">new</span> <span class="nc">MyOrderForm</span><span class="o">(</span><span class="s">"clean code"</span><span class="o">,</span> <span class="mi">2</span><span class="o">),</span> 
                <span class="k">new</span> <span class="nf">MyOrderForm</span><span class="o">(</span><span class="s">"candy"</span><span class="o">,</span> <span class="mi">10</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>    
</code></pre></div> </div> <p>이제 이 서비스를 효율적으로 사용할 수 있는 방법을 생각해 봐야 합니다.</p> <p><code class="language-plaintext highlighter-rouge">if</code>문을 사용해서 아래처럼 각 서비스를 호출할 수 있을거 같네요.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">전달받은</span> <span class="n">서비스명</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"profile"</span><span class="o">))</span> <span class="o">{</span>
    <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyProfileFormService</span><span class="o">();</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">전달받은</span> <span class="n">서비스명</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"order"</span><span class="o">))</span> <span class="o">{</span>
    <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyOrderFormService</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div> </div> <p>이렇게도 사용할 수 있겠지만,<br/> 너무나도 잘 아시다시피 이런 <code class="language-plaintext highlighter-rouge">if...else</code>구문은 우리를(또는 다른사람을) 너무 힘들게 합니다.</p> <p>이걸 해결하기 위해 저는 <strong>Factory Pattern</strong>이 떠올랐습니다!</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyFormFactory</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">MyFormService</span><span class="o">&gt;</span> <span class="n">formServiceMap</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">MyFormService</span> <span class="nf">getInstance</span><span class="o">(</span><span class="nc">String</span> <span class="n">serviceKey</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">formServiceMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">serviceKey</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>    

</code></pre></div> </div> <p><code class="language-plaintext highlighter-rouge">@Component</code>를 선언함으로써 Spring 프레임워크는 <code class="language-plaintext highlighter-rouge">formServiceMap</code> 안에<br/> <code class="language-plaintext highlighter-rouge">MyFormService</code>를 구현한 <code class="language-plaintext highlighter-rouge">MyProfileFormService</code> <code class="language-plaintext highlighter-rouge">MyOrderFormService</code> 를 key, value의 형태로 주입(injection)할 것입니다.<br/> <code class="language-plaintext highlighter-rouge">getInstance</code>메서드는 서비스키(=Bean Name)을 전달받아서 해당 인스턴스를 전달하는 역할을 하지요.</p> <p>이 Factory를 <code class="language-plaintext highlighter-rouge">Service</code>에서 아래처럼 호출하도록 했습니다.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DynamicFormService</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MyFormFactory</span> <span class="n">myFormFactory</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">MyForm</span><span class="o">&gt;&gt;</span> <span class="nf">getForms</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">serviceNames</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">MyForm</span><span class="o">&gt;&gt;</span> <span class="n">sections</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">serviceName</span> <span class="o">:</span> <span class="n">serviceNames</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">MyFormService</span> <span class="n">myFormService</span> <span class="o">=</span> <span class="n">myFormFactory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">serviceName</span><span class="o">);</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MyForm</span><span class="o">&gt;</span> <span class="n">myForms</span> <span class="o">=</span> <span class="n">myFormService</span><span class="o">.</span><span class="na">getMyForms</span><span class="o">();</span>
            <span class="n">sections</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">myForms</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">sections</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>    
</code></pre></div> </div> <p>이제 이 서비스를 호출하는 <code class="language-plaintext highlighter-rouge">Controller</code>를 고민해봐야 합니다.</p> <p><code class="language-plaintext highlighter-rouge">Controller</code>는 <code class="language-plaintext highlighter-rouge">DynamicFormController</code>라고 명명하겠습니다.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DynamicFormController</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">DynamicFormService</span> <span class="n">service</span><span class="o">;</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/forms"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getDynamicForms</span><span class="o">(</span><span class="nc">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">formNames</span> <span class="o">=</span> <span class="o">{</span><span class="s">"myProfileFormService"</span><span class="o">,</span> <span class="s">"myOrderFormService"</span><span class="o">};</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">MyForm</span><span class="o">&gt;&gt;</span> <span class="n">forms</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getForms</span><span class="o">(</span><span class="n">formNames</span><span class="o">);</span>

        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"section"</span><span class="o">,</span> <span class="n">forms</span><span class="o">);</span>

        <span class="k">return</span> <span class="s">"dynamicForm"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>    
</code></pre></div> </div> <p>테스트를 위해 <code class="language-plaintext highlighter-rouge">formNames</code>는 값을 직접 할당하였지만 화면 또는 저장소에서 값을 전달받도록 할 수도 있겠습니다.<br/> 서비스의 <code class="language-plaintext highlighter-rouge">getForms</code>메서드를 호출한 결과를 <code class="language-plaintext highlighter-rouge">model</code>에 세팅하였습니다.</p> <p>이제 화면에서 이 값을 꺼내서 표현하기만 하면 될거 같네요.</p> <p>타임리프를 사용한 html구현 코드입니다.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;table&gt;</span>
    <span class="nt">&lt;tr</span> <span class="na">th:each=</span><span class="s">"forms, formsStat : ${section}"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;td&gt;</span>
            <span class="nt">&lt;span</span> <span class="na">th:text=</span><span class="s">"|Form-${formsStat.index}|"</span><span class="nt">&gt;&lt;/span&gt;</span>
            <span class="nt">&lt;table&gt;</span>
                <span class="nt">&lt;tr</span> <span class="na">th:each=</span><span class="s">"form, formStat : ${forms}"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;td</span> <span class="na">th:if=</span><span class="s">"${form instanceof T(com.jaystar.dto.MyProfileForm)}"</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;table&gt;</span>
                            <span class="nt">&lt;tr&gt;</span>
                                <span class="nt">&lt;td&gt;</span>
                                    <span class="nt">&lt;span&gt;</span>Name:<span class="nt">&lt;/span&gt;</span>
                                    <span class="nt">&lt;span</span> <span class="na">th:text=</span><span class="s">"${form.name}"</span><span class="nt">&gt;&lt;/span&gt;</span>
                                <span class="nt">&lt;/td&gt;</span>
                            <span class="nt">&lt;/tr&gt;</span>
                            <span class="nt">&lt;tr&gt;</span>
                                <span class="nt">&lt;td&gt;</span>
                                    <span class="nt">&lt;span&gt;</span>Phone Number:<span class="nt">&lt;/span&gt;</span>
                                    <span class="nt">&lt;span</span> <span class="na">th:text=</span><span class="s">"${form.phoneNumber}"</span><span class="nt">&gt;&lt;/span&gt;</span>
                                <span class="nt">&lt;/td&gt;</span>
                            <span class="nt">&lt;/tr&gt;</span>
                        <span class="nt">&lt;/table&gt;</span>
                    <span class="nt">&lt;/td&gt;</span>

                    <span class="nt">&lt;td</span> <span class="na">th:if=</span><span class="s">"${form instanceof T(com.jaystar.dto.MyOrderForm)}"</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;table&gt;</span>
                            <span class="nt">&lt;tr&gt;</span>
                                <span class="nt">&lt;td&gt;</span>
                                    <span class="nt">&lt;span&gt;</span>Product Name:<span class="nt">&lt;/span&gt;</span>
                                    <span class="nt">&lt;span</span> <span class="na">th:text=</span><span class="s">"${form.productName}"</span><span class="nt">&gt;&lt;/span&gt;</span>
                                <span class="nt">&lt;/td&gt;</span>
                            <span class="nt">&lt;/tr&gt;</span>
                            <span class="nt">&lt;tr&gt;</span>
                                <span class="nt">&lt;td&gt;</span>
                                    <span class="nt">&lt;span&gt;</span>Quantity:<span class="nt">&lt;/span&gt;</span>
                                    <span class="nt">&lt;span</span> <span class="na">th:text=</span><span class="s">"${form.quantity}"</span><span class="nt">&gt;&lt;/span&gt;</span>
                                <span class="nt">&lt;/td&gt;</span>
                            <span class="nt">&lt;/tr&gt;</span>
                        <span class="nt">&lt;/table&gt;</span>
                    <span class="nt">&lt;/td&gt;</span>
                <span class="nt">&lt;/tr&gt;</span>
            <span class="nt">&lt;/table&gt;</span>
        <span class="nt">&lt;/td&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
<span class="nt">&lt;/table&gt;</span>    
</code></pre></div> </div> <p><img src="/assets/img/2024-01-09-Figure-2.jpg" alt="화면"/></p> <p>이렇게 해서 조회기능을 완성하였습니다.</p> </li> </ul> <h2 id="conclusion">Conclusion</h2> <p>Frontend와 Backend의 역할이 분리된 CSR방식의 경우,<br/> 각 폼의 데이터를 API형식으로 호출하여 사용할 수 있기 때문에 유연하게 처리가 가능합니다.<br/> 하지만 SSR의 경우,<br/> 화면 표시를 위해 데이터도 함께 가져와야 하기 때문에 여러가지 고민이 생기게 됩니다.<br/> 이번글에서는 데이터 전달 객체를 위해 상속(<code class="language-plaintext highlighter-rouge">MyForm</code>)을 사용하고<br/> 각 폼의 데이터 조회를 위한 서비스 호출을 위해 인터페이스(<code class="language-plaintext highlighter-rouge">MyFormService</code>)와 팩토리(<code class="language-plaintext highlighter-rouge">MyFormFactory</code>)를 사용하였습니다.</p> <p>만들고 보니 몇가지 리팩터링 할 내용이 보이네요.</p> <ul> <li>컨트롤러의 <code class="language-plaintext highlighter-rouge">forms</code>타입을 일급 컬렉션으로 변경할 수 있을거 같습니다.</li> <li>html의 타입별 if문 분기를 파일로 따로 뺄 수 있는 방법이 있을거 같네요.</li> </ul> <p><a href="https://jaystar13.github.io/blog/2024/dynamic-form-refactoring/">다음글</a>에서는 리팩터링을 진행해 보도록 하겠습니다.</p> <p>위 소스는 <a href="https://github.com/jaystar13/blog-code/tree/master/_2024-01-09-dynamic-form-search">깃헙</a>에서 확인할 수 있습니다.</p>]]></content><author><name></name></author><category term="develop"/><category term="java"/><category term="spring-boot"/><category term="thymeleaf"/><summary type="html"><![CDATA[스프링 부트와 타임리프를 이용한 동적인 폼 요소 조회]]></summary></entry></feed>